{
  "hash": "13723215cf213f03518b2c415f598db6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    footer: \"[Teaching Intermediate R](https://github.com/atheobold/uscots-intermediate-r)\"\n    theme: [simple, styles.scss]\n    embed-resources: true\n    auto-stretch: true\neditor: source\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n##  {background-image=\"images/06-snow-dashboard.png\" background-position=\"center\" background-size=\"cover\" aria-label=\"Two cute cartoon penguins stand facing each other. The blue penguin on the left is raising one flipper, appearing to toss or launch a glowing, comet-like object with the Quarto logo on it. The orange penguin on the right looks up happily at the flying object.\"}\n\n::: {style=\"font-size: 2.5em; color: #000000;\"}\nQuarto Dashboards\n:::\n\n## Creating a Quarto Dashboard\n\n::: {.midi}\nTo create a dashboard you need to use `format: dashboard` in the YAML:\n:::\n\n```{.bash filename=\"dashboard.qmd\"}\n--- \ntitle: \"Palmer Penguins\"\nauthor: \"Cobblepot Analytics\"\nformat: dashboard\n---\n```\n\n. . .\n\n::: {.midi}\nWe can add further details to the dashboard:\n:::\n\n```{.bash filename=\"dashboard.qmd\"}\n--- \ntitle: \"Palmer Penguins\"\nauthor: \"Cobblepot Analytics\"\nformat: \n  dashboard:\n    logo: images/penguins.png\n    nav-buttons: [linkedin, twitter, github]\n---\n```\n\n\n## Quarto Dashboard Components\n\n</br>\n\n::: {.incremental}\n1. Navigation Bar â€” Icon, title, author, links to sub-pages\n\n<!-- Subpages contain additional content -->\n\n2. Pages, Rows, Columns, and Tabsets \n\n<!-- Pages, rows and columns are defined using markdown headings (with optional attributes to control height, width, etc.). Tabsets can be used to further divide content within a row or column. -->\n\n3. Cards, Sidebars, and Toolbars \n\n<!-- Cards are containers for plots, data display, and free form content. The content of cards typically maps to cells in your notebook or source document. Sidebars and toolbars are used to present inputs within interactive dashboards. -->\n\n:::\n\n# Static Dashboards\n\n## {background-iframe=\"https://mine.quarto.pub/olympic-games-py/\"}\n\n\n## Default Layout (in Rows)\n\n<!-- Here, level 2 markdown headings (e.g. ## Row {height=70%}) define the contents of rows as well as their relative height. The ```{python} code cells in turn automatically create cards that are laid out in columns within the row. -->\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.chart-example}\n```` {.r}\n---\ntitle: \"Palmer Penguins\"\nauthor: \"Allison Theobold\"\nformat: dashboard\n---\n    \n## Row {height=70%}\n\n```{{r}}\n```\n\n## Row {height=30%}\n\n```{{r}}\n```\n\n```{{r}}\n```\n````\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/06-quarto-layout.png){fig-alt=\"A schematic of a page layout showing Chart 1 at the top using the full page width, then Chart 2 and Chart 3 side by side in a row below it.\"}\n:::\n:::\n\n## Changing Orientation (to Columns)\n\n<!-- By default, dashboard pages are laid out first by row, then by column. However, you can change this by specifying the `orientation: columns` document option: -->\n\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.chart-example}\n```` {.r}\n---\ntitle: \"Palmer Penguins\"\nauthor: \"Allison Theobold\"\nformat: \n  dashboard:\n    orientation: columns\n---\n    \n## Column {width=60%}\n\n```{{r}}\n```\n\n## Column {width=40%}\n\n```{{r}}\n```\n\n```{{r}}\n```\n````\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/06-column-orientation.png){fig-alt=\"A schematic of a page layout showing Chart 1 on the left using the full page height, and on the right Chart 2 and Chart 3 are one above the other.\"}\n:::\n:::\n\n## Adding More Pages\n\n```` {.r}\n---\ntitle: \"Palmer Penguins\"\nauthor: \"Allison Theobold\"\nformat: dashboard\n---\n    \n# Bills \n\n```{{r}}\n```\n\n# Flippers {orientation=\"columns\"}\n\n## Column\n\n```{{r}}\n```\n\n```{{r}}\n```\n\n## Column \n\n```{{r}}\n```\n````\n\n. . .\n\n::: {.callout-tip}\nWhat orientation will the `Bills` page use?\n:::\n\n# Fun Stuff!\n\n## Tabsets \n\n[are created by adding the `.tabset` class to a row or column.]{.midi}\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.chart-example}\n```` {.r}\n---\ntitle: \"Palmer Penguins\"\nformat: dashboard\n---\n    \n## Row\n\n```{{r}}\n```\n\n## Row {.tabset}\n\n```{{r}}\n#| title: Chart 2\n```\n\n```{{r}}\n#| title: Chart 3\n```\n````\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/06-tabsets.png){fig-alt=\"Schematic of a dashboard layout showing Chart 1 at the top using the full page width. Below Chart 1, a panel with two tabs is shown: the Chart 2 tab is selected and occupies the full page width; the Chart 3 tab is unselected.\"}\n:::\n:::\n\n## Deeply Nested Tabsets\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.chart-example}\n```` {.r}\n---\ntitle: \"Palmer Penguins\"\nformat: dashboard\n---\n    \n## Row {height=70%}\n\n```{{r}}\n```\n\n## Row {height=30%}\n\n### Column {.tabset}\n\n```{{r}}\n#| title: Chart 2\n```\n\n```{{r}}\n#| title: Chart 3\n```\n\n### Column\n\n```{{r}}\n```\n````\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/06-nested-tabsets.png){fig-alt=\"Schematic of a dashboard layout showing Chart 1 at the top using the full page width. The row below Chart 1 is split into two columns. In the left column is a panel with two tabs: Chart 2 and Chart 3. In the right column is Chart 4.\"}\n:::\n:::\n\n## [Value Boxes](https://mine.quarto.pub/olympic-games-py/) \n\n<!-- ![](images/06-value-boxes.png){fig-alt=\"A screenshot of three value boxes from the first Quarto dashboard shown (of Olympic medals). The first card shown on the left is colored gold and reads 'Most golds: 2363, United States,' the second card shown in the center is colored silver and reads 'Most silvers: 1251, United States,' and the third card shown on the right is colored bronze and reads 'Most bronze: 1126, United States.\"} -->\n\n::: {.chart-example}\n```` {.r}\n## Column - Medals by country {width=35%}\n\n### Row - Value boxes {height=30%}\n\n```{{r}}\n#| label: summer-calculate-most-medals\n\nsummer_most_golds <- summer_olympics |>\n  filter(medal == \"Gold\") |>\n  count(team, sort = TRUE) |>\n  slice_head(n = 1)\n\nsummer_most_silvers <- summer_olympics |>\n  filter(medal == \"Silver\") |>\n  count(team, sort = TRUE) |>\n  slice_head(n = 1)\n\nsummer_most_bronzes <- summer_olympics |>\n  filter(medal == \"Bronze\") |>\n  count(team, sort = TRUE) |>\n  slice_head(n = 1)\n```\n\n::: {.valuebox icon=\"award-fill\" color=\"#d4af37\"}\nMost golds:\n\n`{{r}} summer_most_golds$n`\n\n`{{r}} summer_most_golds$team`\n:::\n\n::: {.valuebox icon=\"award-fill\" color=\"#c0c0c0\"}\nMost silvers:\n\n`{{r}} summer_most_silvers$n`\n\n`{{r}} summer_most_silvers$team`\n:::\n\n::: {.valuebox icon=\"award-fill\" color=\"#cd7f32\"}\nMost bronzes:\n\n`{{r}} summer_most_bronzes$n`\n\n`{{r}} summer_most_bronzes$team`\n````\n:::\n\n# The Middle Child (Part Static, Part Dynamic)\n\n## {background-iframe=\"https://nasoares.quarto.pub/wellcome-global-monitor-2018/\"}\n\n## {background-iframe=\"https://stat541.visruth.com/static_dashboard\"}\n\n# Dynamic Dashboard\n\n## {background-iframe=\"https://jjallaire.shinyapps.io/diamonds/\"}\n\n## Creating a Shiny Dashboard\n\n```{.bash filename=\"dashboard.qmd\"}\n--- \ntitle: \"Palmer Penguins\"\nauthor: \"Cobblepot Analytics\"\nformat: dashboard\nserver: shiny\n---\n```\n\n## Interactive Dashboard Components\n\n::: {.midi}\nThe format of interactive dashboards are similar to a \"standard\" dashboard. The\ndifference lies in how the outputs (e.g., plots, tables) are created. \n\n::: {.incremental}\n1. The user is given a set of controls that influence the output that is seen. \n\n2. There are code chunks that \"react\" to these user inputs.\n\n3. The outputs displayed in the app depend on these user inputs. \n:::\n:::\n\n. . .\n\n::: {.callout-important}\nThere are three main `#| context:` values that code chunks can have: `data`, `setup`, `server`.  \n:::\n\n## `#| context: setup`\n\n::: {.chart-example}\n````{.bash filename=\"dashboard.qmd\"}\n---\ntitle: \"Diamonds Explorer\"\nauthor: \"Barkamian Analytics\"\nformat: dashboard\nserver: shiny\n---\n\n```{{r}}\n#| context: setup\n\nlibrary(ggplot2)\ndataset <- diamonds\n```\n````\n:::\n\n. . .\n\n::: {.small}\n::: {.callout-tip}\nThis could have been broken apart into **two** code chunks, one with a `setup` context and one with a `data` context. Using the `data` context is helpful because any R objects created in that chunk will be saved to an .RData file, which will then be loaded during Shiny server startup. \n:::\n:::\n\n## `.sidebar` Content\n\n::: {.chart-example}\n````{.bash filename=\"dashboard.qmd\"}\n---\ntitle: \"Diamonds Explorer\"\nauthor: \"Barkamian Analytics\"\nformat: dashboard\nserver: shiny\n---\n\n```{{r}}\n#| context: setup\n\nlibrary(ggplot2)\ndataset <- diamonds\n```\n\n\n# {.sidebar}\n\n```{{r}}\nsliderInput('sampleSize', 'Sample Size', \n            min = 1, max = nrow(dataset),\n            value = min(1000, nrow(dataset)), \n            step = 500, round = 0)\nbr()\ncheckboxInput('jitter', 'Jitter')\ncheckboxInput('smooth', 'Smooth')\n```\n\n```{{r}}\nselectInput('x', 'X', names(dataset)) \nselectInput('y', 'Y', names(dataset), names(dataset)[[2]])\nselectInput('color', 'Color', c('None', names(dataset)))\n```\n\n```{{r}}\nselectInput('facet_row', 'Facet Row',\n  c(None = '.', names(diamonds[sapply(diamonds, is.factor)])))\nselectInput('facet_col', 'Facet Column',\n  c(None = '.', names(diamonds[sapply(diamonds, is.factor)])))\n```\n````\n:::\n\n## What's with the formatting?\n\n::: {.small}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliderInput('sampleSize', 'Sample Size', min = 1, max = nrow(dataset),\n            value = min(1000, nrow(dataset)), step = 500, round = 0)\n```\n:::\n\n\n\n:::\n\n::: {.small}\n::: {.incremental}\n- `'sampleSize'`: the name of the object that stores the value (to be used later in other code chunks)\n- `'Sample Size'`: the title (for the slider) that is displayed on the dashboard\n- `min = 1`: the starting value of the slider\n- `max = nrow(dataset)`: the ending value of the slider\n- `value = min(1000, nrow(dataset))`: sets the initial (default) value of the slider \n- `step = 500`: how big of increments should be displayed\n- `round = 0`: specifies there should be 0 decimals places used\n:::\n:::\n\n. . .\n\n::: {.small}\n::: {.callout-tip}\nWhy do these say `dataset` instead of `diamonds`? This makes the app usable for **any** dataset!\n:::\n:::\n\n## How are these inputs used?\n\n::: {.chart-example}\n````{.bash filename=\"dashboard.qmd\"}\n---\ntitle: \"Diamonds Explorer\"\nauthor: \"Barkamian Analytics\"\nformat: dashboard\nserver: shiny\n---\n\n```{{r}}\n#| context: setup\nlibrary(ggplot2)\ndataset <- diamonds\n```\n\n# {.sidebar}\n\n```{{r}}\nsliderInput('sampleSize', 'Sample Size', \n            min=1, max=nrow(dataset),\n            value=min(1000, nrow(dataset)), \n            step=500, round=0)\nbr()\ncheckboxInput('jitter', 'Jitter')\ncheckboxInput('smooth', 'Smooth')\n```\n\n```{{r}}\nselectInput('x', 'X', names(dataset)) \nselectInput('y', 'Y', names(dataset), names(dataset)[[2]])\nselectInput('color', 'Color', c('None', names(dataset)))\n```\n\n```{{r}}\nselectInput('facet_row', 'Facet Row',\n  c(None='.', names(diamonds[sapply(diamonds, is.factor)])))\nselectInput('facet_col', 'Facet Column',\n  c(None='.', names(diamonds[sapply(diamonds, is.factor)])))\n```\n\n# Plot\n\n```{{r}}\nplotOutput('plot')\n```\n\n# Data\n\n```{{r}}\ntableOutput('data')\n```\n\n````\n:::\n\n\n## What about `'plot'` and `'data'`?\n\n````{.bash filename=\"dashboard.qmd\"}\n```{{r}}\n#| context: server\n\ndataset <- reactive({\n  diamonds[sample(nrow(diamonds), input$sampleSize),]\n})\n \noutput$plot <- renderPlot({\n  \n  p <- ggplot(\n    dataset(), \n    aes_string(x=input$x, y=input$y)) + geom_point()\n  \n  if (input$color != 'None')\n    p <- p + aes_string(color=input$color)\n  \n  facets <- paste(input$facet_row, '~', input$facet_col)\n  if (facets != '. ~ .')\n    p <- p + facet_grid(facets)\n  \n  if (input$jitter)\n    p <- p + geom_jitter()\n  if (input$smooth)\n    p <- p + geom_smooth()\n  \n  p\n  \n})\n\noutput$data <- renderTable({\n  dataset()\n})\n```\n````\n\n## How are all of these pieces connected?\n\n::: columns\n::: {.column width=\"90%\"}\n`plotOutput('plot')` is an empty picture frame in your user interface\n:::\n\n::: {.column width=\"10%\"}\n![](images/06-frame.png)\n:::\n:::\n\n. . .\n\n::: columns\n::: {.column width=\"90%\"}\n`renderPlot()` is the painting you generate in your server \n:::\n\n::: {.column width=\"10%\"}\n![](images/06-art.png)\n:::\n:::\n\n. . .\n\n::: columns\n::: {.column width=\"90%\"}\n`output$plot` places the painting in the frame\n:::\n\n::: {.column width=\"10%\"}\n![](images/06-painting.png)\n:::\n:::\n\n. . .\n\n::: columns\n::: {.column width=\"90%\"}\n`plotOutput('plot')` places the painting on display\n:::\n\n::: {.column width=\"10%\"}\n![](images/06-hang-art.png)\n:::\n:::\n\n",
    "supporting": [
      "06-quarto-dashboards_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}