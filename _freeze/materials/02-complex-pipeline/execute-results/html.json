{
  "hash": "8bf70fb97df1a5a0d4b6f5e4cd9d7357",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Complex Data Pipelines\"\nsubtitle: \"\"\nformat: \n  revealjs:\n    footer: \"[USCOTS Intermediate R Workshop](https://atheobold.github.io/uscots-intermediate-r/)\"\n    theme: [simple, styles.scss]\n    embed-resources: true\n    code-fold: true\n    auto-stretch: true\neditor: source\nexecute:\n  echo: true\n---\n\n\n\n\n# Asking more complex research questions\n\n\n\n## Background: Intro level RQs\n\n* The **Big Five** tidyverse verbs:\n\n    + `arrange`\n    + `filter`\n    + `mutate`\n    + `group_by`\n    + `summarize`\n    \n* (Doesn't have to be tidyverse syntax!)\n\n## Dataset 1: Fast food nutrition\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 17\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 9 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>, sugar <dbl>,\n#   protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>, salad <chr>\n```\n\n\n:::\n:::\n\n\n## Single-function RQs\n\nType of basic questions:\n\n* `arrange` What item has **the most** calories?\n\n* `mutate` **Calculate** the saturated fat to total fat ratio of each item.\n\n* `summarize` What is the **median** calorie item?\n\n* `filter` **How many** items have more than 1000 calories?\n\n* `group_by` Same questions, but **within each** restaurant.\n\n## Intro pipeline RQs\n\n* `mutate` -> `arrange` \"What item has the highest saturated fat to total fat ratio?\"\n\n* `mutate` -> `filter` \"How many items have more than 50% of total fat in saturated form?\"\n\n* `group_by` -> `summarize` -> `filter` \"How many restaurants have at least one 2000 calorie item?\"\n\n* any -> plot: \"Make a boxplot of average saturated fat percentages for items in each restaurant.\"\n\n\n## YOUR TURN\n\n::: {.r-fit-text}\nChoose one of your clean tabular datasets.\n\nJot down some research questions or tasks that are answerable with intro-level pipelines on that dataset.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_46a3036c\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n### Ryan's choice: \n\nFind the highest protein to calories ratio item: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_ff = readr::read_csv(\"data/fastfood.csv\")\nr_ff |> \n  mutate(\n    pro_cal = protein / calories, \n    max_pro_cal = max(pro_cal, na.rm = TRUE)\n  ) |>\n  arrange(desc(pro_cal)) |>\n  filter(max_pro_cal == pro_cal)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 19\n  restaurant item       calories cal_fat total_fat sat_fat trans_fat cholesterol\n  <chr>      <chr>         <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n1 Sonic      Ultimate …      100     580        64      15       0.5         100\n# ℹ 11 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, pro_cal <dbl>, max_pro_cal <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NBA read-in\n```\n:::\n\n\n\n\n\n\n# Designing problems for complex pipelines\n\n## Making it complex\n\nWays to level up **pipeline complexity** of the RQs:\n\n1. Changing the *cases/rows* (esp for *visualization*)\n\n2. Operations *inside* `mutate` or with `group_by`\n\n3. Many pivots, especially for *summary tables*\n\n4. Multiple datasets and *joins*\n\n\n## Change the cases/rows\n\n* Summarizing by group: rows become *restaurants* not *items*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  group_by(restaurant) |>\n  summarize(mean(calories))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  restaurant  `mean(calories)`\n  <chr>                  <dbl>\n1 Arbys                   533.\n2 Burger King             609.\n3 Chick Fil-A             384.\n4 Dairy Queen             520.\n5 Mcdonalds               640.\n6 Sonic                   632.\n7 Subway                  503.\n8 Taco Bell               444.\n```\n\n\n:::\n:::\n\n\n## Change the cases/rows\n\n* Pivoting: rows become *nutrition measurement for an item* rather than *items*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  pivot_longer(calories:calcium,\n               values_to = \"amount\",\n               names_to = \"nutritional_item\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,210 × 5\n   restaurant item                             salad nutritional_item amount\n   <chr>      <chr>                            <chr> <chr>             <dbl>\n 1 Mcdonalds  Artisan Grilled Chicken Sandwich Other calories            380\n 2 Mcdonalds  Artisan Grilled Chicken Sandwich Other cal_fat              60\n 3 Mcdonalds  Artisan Grilled Chicken Sandwich Other total_fat             7\n 4 Mcdonalds  Artisan Grilled Chicken Sandwich Other sat_fat               2\n 5 Mcdonalds  Artisan Grilled Chicken Sandwich Other trans_fat             0\n 6 Mcdonalds  Artisan Grilled Chicken Sandwich Other cholesterol          95\n 7 Mcdonalds  Artisan Grilled Chicken Sandwich Other sodium             1110\n 8 Mcdonalds  Artisan Grilled Chicken Sandwich Other total_carb           44\n 9 Mcdonalds  Artisan Grilled Chicken Sandwich Other fiber                 3\n10 Mcdonalds  Artisan Grilled Chicken Sandwich Other sugar                11\n# ℹ 7,200 more rows\n```\n\n\n:::\n:::\n\n\n## Change the cases/rows\n\n* Distinct: rows become *restaurants* rather than *items*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  distinct(restaurant, .keep_all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 17\n  restaurant  item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n  <chr>       <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n1 Mcdonalds   \"Artisan…      380      60         7       2         0          95\n2 Chick Fil-A \"Chargri…      430     144        16       8         0          85\n3 Sonic       \"Hatch G…      710     380        43      17         2         120\n4 Arbys       \"Arby's …      330     100        11       4         0          30\n5 Burger King \"America…     1550    1134       126      47         8         805\n6 Dairy Queen \"1/2 lb.…     1000     660        74      26         2         170\n7 Subway      \"6\\\" B.L…      320      80         9       4         0          20\n8 Taco Bell   \"1/2 lb.…      540     230        26       7         1          45\n# ℹ 9 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>, sugar <dbl>,\n#   protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>, salad <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Do more with mutate\n\n##  `group_by` |> `mutate`\n\n**What is the highest-calorie single item at each restaurant?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  group_by(restaurant) |>\n  mutate(\n    max_calories = max(calories),\n    prop_of_max_cal = calories/max_calories\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 19\n# Groups:   restaurant [8]\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 11 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, max_calories <dbl>, prop_of_max_cal <dbl>\n```\n\n\n:::\n:::\n\n\n## YOUR TURN\n\n\n::: {.r-fit-text}\nThink of a measurement *by category* that you might want to add to *every additional row* of your dataset, for purposes of comparing.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| echo: false\ncountdown(minutes = 3)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_774f0e21\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n### Ryan\n\nFind the highest protein to calories ratio item by restaurant:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_ff = r_ff |> \n  group_by(restaurant) |>\n  mutate(\n    pro_cal = protein / calories, \n    max_pro_cal = max(pro_cal, na.rm = TRUE)\n  )\n```\n:::\n\n\n## String parsing\n\n**Find the median calories for a burger at each restaurant.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  mutate(\n    is_burger = str_detect(item, \"burger\")\n  ) |>\n  filter(is_burger) |>\n  group_by(restaurant) |>\n  summarize(median(calories))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  restaurant  `median(calories)`\n  <chr>                    <dbl>\n1 Burger King                360\n2 Dairy Queen                470\n3 Mcdonalds                  300\n4 Sonic                      800\n```\n\n\n:::\n:::\n\n\n## Regular expressions\n\n*Optional:* Level up this task with regular expressions!\n\n**Find the median calories for a CHEESE burger at each restaurant.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  mutate(\n    is_cheese_burger = str_detect(item, \"[Ch]ee(z|se) ?[bB]urger\")\n  ) |>\n  filter(is_cheese_burger) |>\n  group_by(restaurant) |>\n  summarize(median(calories))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  restaurant  `median(calories)`\n  <chr>                    <dbl>\n1 Burger King                450\n2 Dairy Queen                515\n3 Mcdonalds                  365\n4 Sonic                      800\n```\n\n\n:::\n:::\n\n\n## YOUR TURN\n\n::: {.r-fit-text}\nFind a string column in your dataset, jot down 1-3 new *non-string* columns you might want to make by parsing that string.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_85bd5c7a\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n### Ryan \n\nFrom `item`, do the following: \n\n1. Create a new column called `is_salad`. \n2. Create a new column called `has_chicken` (note: nuggets, chicken, ...).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# r_ff |> \n#   mutate()\n```\n:::\n\n\n\n\n## Complex/unvectorized functions and mapping\n\n**For each item, give the amount of saturated fat or of trans fat, whichever is larger**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## This won't work!\n\ndat_ff |>\n  mutate(\n    bad_fat = max(sat_fat, trans_fat)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 18\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 10 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, bad_fat <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n## Ryan: this does!\ndat_ff |>\n  rowwise() |> \n  mutate(\n    bad_fat = max(sat_fat, trans_fat)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 18\n# Rowwise: \n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 10 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, bad_fat <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Complex/unvectorized functions and mapping\n\n**For each item, give the amount of saturated fat or of trans fat, whichever is larger**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## This will!\n\ndat_ff |>\n  mutate(\n    bad_fat = pmap_dbl(list(sat_fat, trans_fat), max)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 18\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 10 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, bad_fat <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## YOUR TURN - Try an activity\n\n::: {.r-fit-text}\n> Your city has just passed a law that fast food items need to contain a warning note if they have over 40% calories from fat, over 40% saturated fat, or any trans fats at all.\n\n> Write a function that creates a warning note based on an items nutritional information.\n\n> Then, use that function inside of `mutate` to add a warning label for each item.\n\nAs you work on this, make note of any pain points, confusions, or complexities that differentiate this task from an \"Intro level\" one.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_9b0975c6\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# r_ff |> \n```\n:::\n\n\n\n\n## Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_healthy_fat <- function(calories, cal_fat, total_fat, sat_fat, trans_fat) {\n  \n  cal_fat_pct <- cal_fat/calories\n  sat_fat_pct <- sat_fat/total_fat\n  \n  warning <- \"\"\n  \n  if (!is.na(cal_fat_pct) & cal_fat_pct > 0.4) {\n    warning <- paste(warning, \"Calories from fat is high.\")\n  }\n  \n  if (!is.na(sat_fat_pct) & sat_fat_pct > 0.4) {\n    warning <- paste(warning, \"High saturated fat percent.\")\n  }\n  \n  if (!is.na(trans_fat) & trans_fat > 0) {\n    warning <- paste(warning, \"Contains trans fat.\")\n  }\n  \n  return(warning)\n  \n}\n```\n:::\n\n\n## Answer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  mutate(\n    healthy_fat_warning = pmap_chr(list(calories, cal_fat, total_fat, sat_fat, trans_fat), check_healthy_fat)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 18\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 10 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, healthy_fat_warning <chr>\n```\n\n\n:::\n:::\n\n\n\n## Non one-to-one Joins\n\nConsider this additional dataset:\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_loc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,000 × 11\n    ...1 address    categories city  country latitude longitude name  postalCode\n   <dbl> <chr>      <chr>      <chr> <chr>      <dbl>     <dbl> <chr> <chr>     \n 1     0 800 N Can… American … Thib… US          29.8     -90.8 SONI… 70301     \n 2     1 800 N Can… Fast Food… Thib… US          29.8     -90.8 SONI… 70301     \n 3     2 206 Wears… Fast Food… Pige… US          35.8     -83.6 Taco… 37863     \n 4     3 3652 Park… Fast Food  Pige… US          35.8     -83.6 Arby… 37863     \n 5     4 2118 Mt Z… Fast Food… Morr… US          33.6     -84.3 Stea… 30260     \n 6     5 9768 Gran… Fast Food… Detr… US          42.4     -83.1 Wend… 48204     \n 7     6 13600 W M… Fast Food… Detr… US          42.4     -83.2 Burg… 48235     \n 8     7 4111 Ocea… Fast Food  Ocea… US          33.2    -117.  Chip… 92056     \n 9     8 162 Old C… Fast Food… Rive… US          40.9     -72.7 7-El… 11901     \n10     9 1407 S St… Fast Food… Mona… US          31.6    -103.  Dair… 79756     \n# ℹ 9,990 more rows\n# ℹ 2 more variables: province <chr>, websites <chr>\n```\n\n\n:::\n:::\n\n\n## Complex joins\n\nThere are some complications in joining this data to our nutritional data...\n\n* The restaurants aren't named consistently, e.g. \"Sonic\" vs \"SONIC Drive-In\".\n\n* Sometimes there are multiple matches - \"Dairy Queen\", \"Wolf's Dairy Queen\", \"Dairy Heaven\", \"Dairy Queen (Treat Only)\"\n\n* Many restaurants appear in `dat_loc` but not `dat_ff`.\n\n* Each restaurant appears multiple times in both `dat_loc` and `dat_ff`.\n\n## Filtering Joins\n\n`anti_join` can be used to check which keys don't match:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  anti_join(dat_loc,\n            by = c(\"restaurant\" = \"name\")) |>\n  distinct(restaurant)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  restaurant \n  <chr>      \n1 Chick Fil-A\n```\n\n\n:::\n:::\n\n\n\n## Mutating Joins\n\n\"Where can I get a burger?\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_ff |>\n  filter(str_detect(item, \"burger\")) |>\n  distinct(restaurant) |>\n  left_join(dat_loc,\n            by = c(\"restaurant\" = \"name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,075 × 11\n   restaurant  ...1 address          categories city  country latitude longitude\n   <chr>      <dbl> <chr>            <chr>      <chr> <chr>      <dbl>     <dbl>\n 1 Mcdonalds   8688 3926 52nd St     Fast Food  Keno… US          42.6     -87.9\n 2 Mcdonalds   8950 116 E Sr 200     Fast Food  Yulee US          30.6     -81.6\n 3 Mcdonalds   9034 3009 Hwy 190 W   Fast Food… Hamm… US          30.5     -90.5\n 4 Mcdonalds   9080 200 Jonesboro Rd Fast Food… McDo… US          33.5     -84.2\n 5 Sonic       1563 1211 S Union St  Fast Food… Opel… US          30.5     -92.1\n 6 Sonic       4083 4403 S Tamarac … Fast Food  Denv… US          39.6    -105. \n 7 Sonic       4084 11658 E Colfax … Fast Food  Auro… US          39.7    -105. \n 8 Sonic       4140 1805 E William … Fast Food  Aust… US          30.2     -97.8\n 9 Sonic       5186 103 Niagara St   Burger Jo… East… US          38.9     -90.1\n10 Sonic       5187 1205 Parkway Dr  Fast Food… Blac… US          43.2    -112. \n# ℹ 1,065 more rows\n# ℹ 3 more variables: postalCode <chr>, province <chr>, websites <chr>\n```\n\n\n:::\n:::\n\n\n## Mutating Joins\n\nNotice:\n\n* We used `distinct` on `dat_ff` first.  This makes it a *one-to-many* join instead of a *many-to-many*.  Why is this good/what if we didn't?\n\n* `dat_ff` had 515 rows. `dat_loc` had 10000.  The result of our pipeline has `1075`. *When a join is not one-to-one, you can't predict the number of rows easily!*\n\n* What if we had used `full_join`?  `right_join`?\n\n\n## YOUR TURN\n\n::: {.r-fit-text}\nLook at your collection of data - where are there keys to match?  Are any of them not one-to-one, or otherwise complex?\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_bc571ddb\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Multiple Pivots\n\nA common pipeline with multiple pivots might be:\n\n1. Do a calculation\n2. Pivot longer\n3. Join\n4. Calculate some summary by groups\n5. Pivot back wider\n\n## Example\n\n> What city has the most burgers?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nburger_counts <- dat_ff |> \n  mutate(\n    is_burger = str_detect(item, \"burger\")\n  ) |>\n  group_by(restaurant) |> \n  count(is_burger) |>\n  pivot_wider(names_from = is_burger,\n              values_from = n,\n              names_prefix = \"burger_\")\n\nburger_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   restaurant [8]\n  restaurant  burger_FALSE burger_TRUE\n  <chr>              <int>       <int>\n1 Arbys                 55          NA\n2 Burger King           61           9\n3 Chick Fil-A           27          NA\n4 Dairy Queen           36           6\n5 Mcdonalds             54           3\n6 Sonic                 40          13\n7 Subway                96          NA\n8 Taco Bell            115          NA\n```\n\n\n:::\n:::\n\n\n## Example\n\n> What city has the most burgers?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nburger_counts |>\n  left_join(dat_loc,\n            by = c(\"restaurant\" = \"name\")) |>\n  group_by(city) |>\n  summarize(\n    total_burgers = sum(burger_TRUE, na.rm = TRUE)\n  ) |>\n  arrange(desc(total_burgers))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,502 × 2\n   city        total_burgers\n   <chr>               <int>\n 1 Los Angeles           108\n 2 Houston                99\n 3 Detroit                81\n 4 Chicago                78\n 5 Miami                  63\n 6 Minneapolis            63\n 7 Omaha                  63\n 8 Dallas                 53\n 9 Phoenix                48\n10 Saint Paul             48\n# ℹ 1,492 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## YOUR TURN\n\n::: {.r-fit-text}\nSketch a summary table that might be interesting for your data, then reverse engineer the pivots and joins needed to achieve it.\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_287af586\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n<!-- # Teaching unit testing principles -->\n\n<!-- ## \"Checking in\" on the pipeline -->\n\n<!-- ## Look at the extremes -->\n\n<!-- ## Try to break it -->\n\n<!-- # Summary and resources -->\n\n<!-- ## RegEx -->\n\n<!-- ## Map/apply inside and outside -->\n\n<!-- ## Custom functions for pipeline problems -->\n\n<!-- ## List-cols -->\n\n\n# Designing pipeline activities\n\n## \"Transition\" or \"Scaffold\" activities\n\nSome suggested \"scaffold\" activities:\n\n1. Sketch a plan\n\n2. Reorder a pipeline\n\n3. Fill in a blank\n\n## Sketch a plan\n\n* Begin with **pen-and-paper only** - no computer, no code\n\n* Plan out the steps needed to address the RQ\n\n* Include \"sketches\" of the how the dataset should look after each step\n\n## Reorder a pipeline\n\nProvide all the pipeline elements, ask students to put them in proper order.\n\n```\nburger_counts |>\n\na) summarize(\n    total_burgers = sum(burger_TRUE, na.rm = TRUE)\n  )\nb) group_by(city)\nc) left_join(dat_loc,\n            by = c(\"restaurant\" = \"name\"))\nd) arrange(desc(total_burgers))\n  \n```\n\nAnswer: `c-b-a-d`\n\n## Fill in a blank\n\nThis could mean fill in a blank in **code** to achieve a goal ...\n\n```\nburger_counts |>\n  left_join(dat_loc,\n            by = c(\"restaurant\" = \"name\")) |>\n  ___________ |>\n  summarize(\n    total_burgers = sum(burger_TRUE, na.rm = TRUE)\n  ) |>\n  arrange(desc(total_burgers))\n\n```\n\n## Fill in a blank\n\nThis could also mean fill in an *intermediate dataset step*:\n\n```\n[Original Data Sketch]\n->\n[Joined Data Sketch]\n->\nSTUDENTS FILL IN THIS SKETCH\n->\n[Final output]\n```\n\n\n## YOUR TURN\n\n::: {.r-fit-text}\nFor your dataset, come up with some research questions that require a complicated pipeline to address. \n\nSketch out the steps needed to answer a research question.\n\nJot down some ideas about how you would make *transitional* student questions out of these - e.g., which steps would you show and which would you leave blank?\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_80a38dd5\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n",
    "supporting": [
      "02-complex-pipeline_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}